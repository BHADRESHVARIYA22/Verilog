// This is Complete Verilog Tutorial for beginner :  By Bhadresh Variya 

*********************************************************************************************************
CHAPTER N0. 1 DATA TYPES
*********************************************************************************************************

=========================================================================================================
1.Comment in Verilog
=========================================================================================================
--->  there are two way to comment in verilog 
	1) // ---> Single line comment
	2) /* This is a multiline comment */


=========================================================================================================
2.White space :  space, tabs and Newline are whitespace in verilog 
=========================================================================================================
---->  these are ignored by verilog it is used for code indetation to easy to read

 
=========================================================================================================
3. Operator 
=========================================================================================================
----> there are mainly 3 types of operator in verilog
	1) unary	: x = ~y;
	2) binary	: x = a | b;
	3) ternary	: x = ( a > 4 ) ? b : c;

=========================================================================================================
4. Number format in verilog
=========================================================================================================
----> number without specify base formatis than  By default verilog simulator treat as decimal

	1) sized number : 
		Syntax	: [size]'[base] [number]
		Example : 1) 3'b101;		// binary 3 bit wide number
			  2) 3'd2;  		// decimal 3 bit wide number
			  3) 8'hA0;		// hex 8 bit wide number
			  4) 32'hFACE_A091;	// hex 32 bit wide number separe by undescore : valid

	2) unsized	:
		Example : integer a = 5463;  // Its decimal number size depeds on simulator
			  
	3) Negative	:
		--> Negative number specify by using placing "-" sign before size of number
		Example : -6'd3

	4) String	:
		--> Sequence of charactor enclosed by "" is callled string
		--> in String store 1 charactor required 1 byte (8 bit)

=========================================================================================================
5 . Identifier :  Its a name of variable used for referencing later or store the value
=========================================================================================================
		--> Name of variable made with [a-z],[A-Z][0-9],_,$
		--> Name does not start with Number and $ sign

=========================================================================================================
6.  Data types :
=========================================================================================================
	1)  Possible values variable can store
		A : 0 False
		B : 1 True
		C : X Unknown
		D : Z High Impednace state :  Like unconnect wire

	2)  Nets :  -> Nets are used for connect two digital Element
		    -> In digital design we are net define as a wire data type

	3)  Wire :  -> Wire does not contain any values
		    Example : 
			wire a;			
			wire [3:0] y;

	4)  Reg :   -> Reg data type are used for store the value  
		    Example : 
			reg [3:0] y;

       some data type are pendig from chipverify i will put later...

=========================================================================================================


*********************************************************************************************************
CHAPTER NO. 2 BUILDING BLOCK
*********************************************************************************************************


=========================================================================================================
2.1 Verilog Module 
=========================================================================================================

---> Syntax :
	module <name> (<port list >);

		//content
	
	endmodule

---> Example :
	module and_gate_s(a,b,y);
		input a,b;
		output y;

		and(y,a,b);  // structural Modeling
		// assign y = a & b; // Data flow modeling
                
	endmodule


=========================================================================================================
2.2 Verilog Port 
=========================================================================================================

1. Types of port
	-> Input
	-> Output
	-> Inout

	Syntax	: input <net_type> <range> listOfname;

	Example : 1. input wire clk;
		  2. input en,b;
		  3. input [7:0] data, addr;
	
=========================================================================================================
2.3 Module Instantiation 
=========================================================================================================

--> bigger and Complex design are build by integration with multiple module in hierarchical manner 
--> in Parent module we can instantiate the child module and connect the Port with top Module. 


=========================================================================================================
2.4 Port connection 
=========================================================================================================
There are two method to connect port to the top module :
-->  1. Port connection by Oder list
	Example : 
		module mydesign (a,b,c,d);
			input a,b,c;
			output d;
			// Contents : a at 1 b at 2 c at 3 and d at 4 position 
		endmodule 

		module top_mod;
			wire [1:0] x;
			wire y z;
			
			mydesign d0 (x[0], x[1], y, z);
				// x[0] --> a x[1]--> b
				// y --> c & z --> d
		endmodule 

-->  2. Port connect by name
	Example : 
		module mydesign (a,b,c,d);
			input a,b,c;
			output d;
			// Contents:
		endmodule 

		module top_mod;
			wire [1:0] x;
			wire y z;
			
			mydesign d0 (.a(x[0]), .b(x[1]), .d(y), .c(z));
		
		endmodule 

--> Unconnect or Floating Port : 
	--> Floating port will have  value of high impedance (Z) 
=========================================================================================================
2.5 Assign Statement 
=========================================================================================================
--> Mostly Use for dataflow modeling than synthesing into real hardware
--> Expression or Siganl on the righ hand side is evulate and than assign into the left hand side variable
--> assign statements are also called continuous assignments and are always active
--> Whenever any operand on the RHS changes in value, LHS will be updated with the new value.
--> LHS should always be a scalar or vector net or a concatenation of scalar or vector nets and never a scalar or vector register.
--> RHS can contain scalar or vector registers and function calls.

 Syntax :  assign out = a & b;


--> We cannot drive or assign reg type variables with an assign statement because a reg variable is capable  
    of storing data and is not driven continuously.
--> Reg signals can only be driven in procedural blocks such as always and initial.

=========================================================================================================
2.6 Operators : 
=========================================================================================================
1. Arithmatic : 

	Character	Operation 	Example
	+		Add		b + c 
	-		Subtrac		b - c 
	/		Divide		b / a 
	*		Multiply	a * b 
	%		Modulus		b % a
	** 		power 		a ** b

2. Bit wise Operator :
	Character	Operation performed	Example
	~		Invert each bit		~a 
	&		And each bit		b & c 
	|		Or each bit		a | b 
	^		Xor each bit		a ^ b 
	^~ or ~^	Xnor each bit		a ^~ b

3. Realation Operator : 

	Character	Operation performed	Example
	>		Greater than		a > b 
	<		Smaller than		a < b 
	>=		Greater than or equal	a >= d 
	<=		Smaller than or equal	a <= e 
	==		Equalityu		a == b 
	!=		Inequality		a != b 
	===		Case equality		e === e
	!===		Case inequality		a !== d

4. Logical Operator : 

	Character	Operation performed		Example
	!		Not true			!(a && b) 
	&&		Both expressions true		a && b 
	||		One ore both expressions true	a || b

5. Shift Operators : 
	--> These operators shift operands to the right or left, the size is kept constant,
	    shifted bits are lost, and the vector is filled with zeroes.

	Character	Operation performed	Example
	>>		Shift right		b >> 1
	<<		Shift left		a << 2

6. Reduction Operators : 
	Character	Operation performed	Example
	&		And all bits		&a 
	~&		Nand all bits		~&a
	|		Or all bits		|a 
	~|		Nor all bits		~|a
	^		Xor all bits		^a 
	^~ or ~^	Xnor all bits		~^a

7. Assignment Operators :

	assign (continuous assignment)
	<= (non-blocking assignment)
	= (blocking assignment)

=========================================================================================================
2.7 Always block :
=========================================================================================================
- There are two type of procedural block in Verilog 1. Always and 2. Initial
- In Verilog, the always block is one of the procedural blocks. 
- Statements inside an always block are executed sequentially.
-  The always block execute some particular event . The event is define in sensitive list

	Syntax : 
	always @ (event)  
   	 [statement]  
  
	always @ (event) begin  
   	 [multiple statements]  
	end  
There are two types of sensitive list in the Verilog, such as:
	1.Level sensitive (for combinational circuits).
	2.Edge sensitive (for flip-flops).


=========================================================================================================
2.8  Initial Block : 
=========================================================================================================
- Initial block is not synthesizable
- The initial processes execute once, whereas always process repeatedly execute forever.
	Syntax :
	initial  
   	 [single statement]  
  
	initial begin  
  	  [multiple statements]  
	end  

- These blocks are primarily used to initialize variables and drive design ports with specific values.
- $finish is a Verilog system task that tells the simulator to terminate the current simulation.

There are few rules keep in mind while  writing Verilog Code :
- reg can be assigned to only in initial and always blocks
- wire can be assigned a value only via assign statement
- If there are multiple statements in an initial/always block, they should be wrapped in begin .. end


=========================================================================================================
3.1 Verilog block statement 
=========================================================================================================

- The block statements are the grouping of two or more statements together,
  which act syntactically like a single statement. There are two types of blocks in the Verilog:
	1. Sequential block
	2. Parallel block

1. Sequential block
	- Statements will be executed in the sequence, one after another.
	- Delay values for each statement are treated relative to the simulation time of the previous statement's execution.
	- Control can pass out of the block after the last statement executes.
	Syntax : 
	begin: name  
     	 statement1;  
      	 ........  
	end 
 
2. Parallel block
	- Statements are launched in parallel by wrapping them within the fork and join keywords.
	- Statements will execute concurrently.
	- Delay values for each statement are considered relative to the simulation time of entering the block.
	- Delay control can be used to provide time-ordering for assignments.
	- Control can pass out of the block when the last time-ordered statement executes.
	Syntax  : 
	fork: name  
        	statement;  
       		.....  
	join  
	
	Example :
 
	initial begin  
   	 #10 data = 8'hfe;  
   	 fork  
       	    #10 data = 8'h11;  
         begin  
            #20 data = 8'h00;  
            #30 data = 8'haa;  
         end  
   	 join  
	end  

			#10 data <- 8'hfe
		|-------------fork------------|
	#20 data <- 8'h00		#10 data <- 8'h11
	#30 data <- 8'haa
		|-------------join------------|

- Both sequential and parallel blocks can be named by adding name_of_block after the begin and fork keywords. 
- By doing this, the block can be referenced in a disable statement.
	begin: name_seq  
    		[statements]  
	end  
	fork: name_fork  
    		[statements]  
	join  


=========================================================================================================
3.1 Verilog Assignments
=========================================================================================================

- Placing values onto variables and nets are called assignments. There are three necessary forms:

	1. Procedural
	2. Continuous
	3. Procedural continuous
*** Note : Need help to Understand


=========================================================================================================
3.2 Blocking & non-blocking assignment
=========================================================================================================
1 . Blocking Assignment : 
	- Blocking assignment statements are assigned using (=) operator and are executed one after the other in a procedural block.
	Example : 
	module Block;  
	  reg [7:0] a, b, c, d, e;  
	  
	  initial begin  
	    a = 8'hDA;  
	    $display ("[%0t] a=0x%0h b=0x%0h c=0x%0h", $time, a, b, c);  
	    b = 8'hF1;  
	    $display ("[%0t] a=0x%0h b=0x%0h c=0x%0h", $time, a, b, c);  
	    c = 8'h30;  
	    $display ("[%0t] a=0x%0h b=0x%0h c=0x%0h", $time, a, b, c);  
	  end  
	  
	  initial begin  
	    d = 8'hAA;  
	    $display ("[%0t] d=0x%0h e=0x%0h", $time, d, e);  
	    e = 8'h55;  
	    $display ("[%0t] d=0x%0h e=0x%0h", $time, d, e);  
	  end  
	endmodule 

	Results : 
		[0] a=0xda b=0xx c=0xx  
		[0] a=0xda b=0xf1 c=0xx  
		[0] a=0xda b=0xf1 c=0x30  
		[0] d=0xaa e=0xx  
		[0] d=0xaa e=0x55  

	Example 2 :
	module Block;  
	  reg [7:0] a, b, c, d, e;  
	  initial begin  
	    a = 8'hDA;  
	    $display ("[%0t] a=0x%0h b=0x%0h c=0x%0h", $time, a, b, c);  
	    #10 b = 8'hF1;  
	    $display ("[%0t] a=0x%0h b=0x%0h c=0x%0h", $time, a, b, c);  
	    c = 8'h30;  
	    $display ("[%0t] a=0x%0h b=0x%0h c=0x%0h", $time, a, b, c);  
	  end  
	  initial begin  
	    #5 d = 8'hAA;  
	    $display ("[%0t] d=0x%0h e=0x%0h", $time, d, e);  
	    #5 e = 8'h55;  
	    $display ("[%0t] d=0x%0h e=0x%0h", $time, d, e);  
	  end  
	endmodule 
	Results : 
	[0] a=0xda b=0xx c=0xx  
	[5] d=0xaa e=0xx  
	[10] a=0xda b=0xf1 c=0xx  
	[10] a=0xda b=0xf1 c=0x30  
	[10] d=0xaa e=0x55 

 2. Non-Blocking assignment :
	- Non-blocking assignment statements are allowed to be scheduled without blocking the execution 
	of the following statements and is specified by a (<=) symbol.
	Example : 
	 module Block;  
	  reg [7:0] a, b, c, d, e;  
	  initial begin  
	    a <= 8'hDA;  
	    $display ("[%0t] a=0x%0h b=0x%0h c=0x%0h", $time, a, b, c);  
	    b <= 8'hF1;  
	    $display ("[%0t] a=0x%0h b=0x%0h c=0x%0h", $time, a, b, c);  
	    c <= 8'h30;  
	    $display ("[%0t] a=0x%0h b=0x%0h c=0x%0h", $time, a, b, c);  
	  end  
	  initial begin  
	    d <= 8'hAA;  
	    $display ("[%0t] d=0x%0h e=0x%0h", $time, d, e);  
	    e <= 8'h55;  
	    $display ("[%0t] d=0x%0h e=0x%0h", $time, d, e);  
	  end  
	 endmodule  

	Results : 
	[0] a=0xx b=0xx c=0xx  
	[0] a=0xx b=0xx c=0xx  
	[0] a=0xx b=0xx c=0xx  
	[0] d=0xx e=0xx  
	[0] d=0xx e=0xx  
=========================================================================================================
3.3 Verilog Control Flow 
=========================================================================================================
	1. if-else-if

		Syntax :
		// if statement without else part  
		if (expression)  
		    [statement]  
		  
		// if statement with an else part  
		if (expression)  
		    [statement]  
		else  
		    [statement]  
:		  
		// if else for multiple statements should be  
		// enclosed within "begin" and "end"  
		  
		if (expression) begin  
		    [multiple statements]  
		end else begin  
		    [multiple statements]  
		end  
		  
		// if-else-if statement  
		if (expression)  
		    [statement]  
		else if (expression)  
		    [statement]  
		   
		else  
		    [statement] 

 - In Verilog, there are four different types of looping statements.

	1. Forever loop 
	Syntax

		Forever  
		      [statement]  
		forever begin  
		      [multiple statements]  
		end  

	2. Repeat loop
	This will execute statements a fixed number of times. If the expression evaluates to an X or Z, it will be treated as zero and not executed.
	Syntax
		
		repeat ([num_of_times]) begin  
		    [statements]  
		end  
		repeat ([num_of_times]) @ ([some_event]) begin  
		    [statements]  
		end 
	3. While loop
	Syntax :

		while (expression) begin  
   		 [statements]  
		end
	4. for loop 
	Syntax :
		for ( initial_assignment; condition; increment_variable) begin  
    			[statements]  
		end  

=========================================================================================================
3.4 Case statement :
=========================================================================================================
    case(sel)  
      2'b00    : out = a;       // If sel=0, output can be a  
      2'b01    : out = b;       // If sel=1, output is b  
      2'b10    : out = c;       // If sel=2, output is c  
      default  : out = 0;       // If sel is something, out is commonly zero  
    endcase 


=========================================================================================================
3.5 Parameter : 
=========================================================================================================
- Parameter nothing but it is a constanst 
- this consant Declare in the module by using keyword parameter 
- Parameter can not used as a variable 
- Code to be more generic by using parameter 

Syntax : 
	parameter MSB = 7;                  // MSB is a parameter with the constant value 7   
	parameter REAL = 4.5;               // REAL holds the real number   
	parameter FIFO_DEPTH = 256,  
	          MAX_WIDTH = 32;           // Declares two parameters  
	parameter [7:0] f_const = 2'b3;     // 2 bit value is converted into 8 bits; 8'b3 

=========================================================================================================
4. Display Task in Verilog
=========================================================================================================

	

   
